#include <opencv2/opencv.hpp>
#include <stdio.h>
#include <iostream>

#define CUDA_KERNEL_LOOP(i,n) \
for(int i = blockIdx.x * blockDim.x + threadIdx.x; \
i < (n); \
i +=blockDim.x * gridDim.x)

#define CUDA_NUM_THREADS 256
#define CUDA_GET_BLOCK(n) ((n) / CUDA_NUM_THREADS + 1)


__global__ void sobel(double* data,double* sobel_x,int nums,int rows,int cols,int channels)
{
//	CUDA_KERNEL_LOOP(index,nums) {
//		int ch = (index % channels);
//		int wh = (index / channels);
//		int c = (wh % cols);
//		int r = (wh / cols);
//		if(c <= 1 || c >= cols - 2 || r <= 1 || r >= rows - 2)
//		{
//			*(sobel_x + r * cols * channels + c * channels + ch) 
//				= 0;
//		}
//		else
//		{
//			double tl = *(data + (r-1) * cols * channels + (c-1) * channels + ch);
//			double l = *(data + r * cols * channels + (c-1) * channels + ch);
//			double bl = *(data + (r+1) * cols * channels + (c-1) * channels + ch);
//			double tr = *(data + (r-1) * cols * channels + (c+1) * channels + ch);
//			double ri = *(data + r * cols * channels + (c+1) * channels + ch);
//			double br = *(data + (r+1) * cols * channels + (c+1) * channels + ch);
//			double tmp
//				= (-1) * tl + (-2) * l + (-1) * bl + tr + 2 * ri + br;
//			*(sobel_x + r * cols * channels + c * channels + ch) = tmp;
//		}
//	}
	int i = blockIdx.x * blockDim.x + threadIdx.x;
	if(i < nums)
		sobel_x[i] = 0;
}

cv::Mat sobel_gpu(cv::Mat im)
{
	int rows = im.rows;
	int cols = im.cols;
	int channels = im.channels();	
	int size = rows * cols * channels;
	double* data = new double[size];
	for(int r = 0; r < rows; r++)
	{
		for(int c = 0; c < cols; c++)
		{
			for(int ch = 0; ch < channels; ch++)
			{
				*(data + r * cols * channels + c * channels + ch)
					= *(im.data + r * cols * channels + c * channels + ch);
			}
		}
	}
	double* gpu_data;
	cudaMalloc((void**) &gpu_data,sizeof(double) * size);
	cudaMemcpy(gpu_data,data,sizeof(double) * size,cudaMemcpyHostToDevice);
	double* gpu_sobel_x;
	cudaMalloc((void**) &gpu_sobel_x,sizeof(double) * size);
	int blocks = CUDA_GET_BLOCK(size);
	sobel<<<blocks,CUDA_NUM_THREADS>>>(gpu_data,gpu_sobel_x,size,rows,cols,channels);
	cudaMemcpy(data,gpu_sobel_x,sizeof(double) * size, cudaMemcpyDeviceToHost);
	cudaFree(gpu_data);
	cudaFree(gpu_sobel_x);

	cv::Mat edge_mat(rows,cols,im.type());

		for(int r = 0; r < rows; r++)
	{
		for(int c = 0; c < cols; c++)
		{
			for(int ch = 0; ch < channels; ch++)
			{
				*(edge_mat.data + r * cols * channels + c * channels + ch)
					= *(data + r * cols * channels + c * channels + ch);
			}
		}
	}
	delete[] data;
	return edge_mat;
}


